<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stefan's brain dump]]></title>
  <link href="http://sfleiter.github.io/atom.xml" rel="self"/>
  <link href="http://sfleiter.github.io/"/>
  <updated>2013-12-08T20:12:37+01:00</updated>
  <id>http://sfleiter.github.io/</id>
  <author>
    <name><![CDATA[Stefan Fleiter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JBoss 7 Database Tracing]]></title>
    <link href="http://sfleiter.github.io/blog/2013/12/08/jboss-datasource-proxy-with-log4jdbc-log4j2/"/>
    <updated>2013-12-08T18:19:00+01:00</updated>
    <id>http://sfleiter.github.io/blog/2013/12/08/jboss-datasource-proxy-with-log4jdbc-log4j2</id>
    <content type="html"><![CDATA[<p>When developing applications using databases it can be interesing to know
what is happening at the JDBC level exactly.
In this post a solution and integration into JBoss AS 7.2 is shown.</p>

<!-- more -->


<p>There are many reasons for that:</p>

<ul>
<li>Wanting to know what exactly your ORM framework of choice is doing</li>
<li>Verifying correct transaction management</li>
<li>Measuring execution time</li>
</ul>


<p>To help with that datasource <a href="http://sourceforge.net/projects/p6spy/">proxies</a> <a href="https://code.google.com/p/log4jdbc/">were</a> <a href="https://code.google.com/p/log4jdbc-remix/">created</a> that can log those activities you are interested in.
After all these projects <a href="https://code.google.com/p/log4jdbc-log4j2/">log4jdbc-log4j2</a> includes all the features the others had and even extends on them.
For the goal of this post the possibility to be configured as a datasource is the most important one. This is needed to integrate with container managed datasources.</p>

<p>The following steps will be necessary to enable JDBC tracing for JBoss AS datssources:</p>

<ul>
<li>Add a JBoss AS module for log4jdbc-log4j2</li>
<li>Add a datasource driver to the JBoss configuration</li>
<li>Adjust the JDBC URL</li>
<li>Configure log4jdbc-log4j2 logging in JBoss AS</li>
</ul>


<p>log4jdbc-log4j2 provides different artifacts for different JDBC versions. For Java 7, which is a good fit for JBoss AS 7.2, the <a href="https://code.google.com/p/log4jdbc-log4j2/downloads/list?q=jdbc4.1">newest jdbc4.1 version</a> should be used (1.15 when writing this article).</p>

<h2>Add a JBoss AS module for log4jdbc-log4j2</h2>

<p>JBoss AS is built upon <a href="https://docs.jboss.org/author/display/MODULES/Introduction">JBoss Modules</a> which provides a modular (hierarchical) class loading and execution environment. Each module only sees those modules it has registered dependencies for. Every part of JBoss AS is part of a module, even the deployed applications built a module hierarchy. JBoss AS detects the correct dependencies of these applications to container provided modules and adds them dynamically as described in <a href="https://docs.jboss.org/author/display/AS72/Implicit+module+dependencies+for+deployments">Implicit module dependencies for deployments</a>.</p>

<p>log4jdbc-log4j2 also needs to be packaged as a module to be usable by other JBoss AS modules. First the module structure needs to be created including the jar file downloaded before:</p>

<figure class='code'><figcaption><span>Create module structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p modules/net/sf/log4jdbc/main
</span><span class='line'>cp ~/Downloads/log4jdbc-log4j2-jdbc4.1-1.15.jar modules/net/sf/log4jdbc/main
</span></code></pre></td></tr></table></div></figure>


<p>Second a module descriptor is needed at <code>modules/net/sf/log4jdbc/main/module.xml</code>:</p>

<figure class='code'><figcaption><span>module.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;module</span> <span class="na">xmlns=</span><span class="s">&quot;urn:jboss:module:1.1&quot;</span> <span class="na">name=</span><span class="s">&quot;net.sf.log4jdbc&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;resource-root</span> <span class="na">path=</span><span class="s">&quot;log4jdbc-log4j2-jdbc4.1-1.15.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;javax.api&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;javax.transaction.api&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;org.slf4j&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;com.h2database.h2&quot;</span> <span class="na">optional=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- TODO: add other database modules as other optional dependencies like h2 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lines of this <a href="https://docs.jboss.org/author/display/MODULES/Module+descriptors">module descriptor</a> need explanation. In the first line the <code>name</code> of the module is specified so other modules will be able to depend on it. The <code>resources</code> section lists the java libraries and classes of the module, path is relative to the module.xml. The <code>depdendencies</code> section lists the modules this module depends on. <code>javax.api</code> and <code>javax.transaction.api</code> provide classes needed by JDBC drivers and datasources, so they are added. <code>org.slf4j</code> is the well known logging facade. log4jdbc-log4j2 normally works with log4j2 as suggested by the name, but can also be configured to use slf4j which is the better option to integrate with JBoss AS. A slf4j compatible logging facade is part of JBoss AS and enables logging cofiguration as part of the container.</p>

<p><em>Optional</em> dependencies for every other database driver module, that might be used together with the proxy,
have to be added for log4jdbc-log4j2 to be able to load and delegate to its classes.
Marking them as optional makes them available but allows the module to load if any of them is not available. With that it is possible to add the dependencies even if the driver is not available in some configuration.</p>

<p>For log4jdbc-log4j2 to use slf4j globally it has to be configured by means of a system property. To add this permanently to the JBoss configuration add the following line to the end of <code>bin/standalone.conf</code></p>

<figure class='code'><figcaption><span>bin/standalone.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -Dlog4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Add a Datasource driver to the JBoss configuration</h2>

<p>Before changing the JBoss configuration a backup should be created.</p>

<figure class='code'><figcaption><span>Copy the JBoss AS configuration to some other place</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp standalone/configuration/standalone.xml standalone/configuration/standalone.xml.org
</span></code></pre></td></tr></table></div></figure>


<p>Now the following changes should be done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- standalone/configuration/standalone.xml.org 2013-12-05 21:10:44.357585099 +0100</span>
</span><span class='line'><span class="gi">+++ standalone/configuration/standalone.xml     2013-12-05 21:12:42.450172949 +0100</span>
</span><span class='line'><span class="gu">@@ -102,7 +102,7 @@</span>
</span><span class='line'>             &lt;datasources&gt;
</span><span class='line'>                 &lt;datasource jndi-name=&quot;java:jboss/datasources/ExampleDS&quot; pool-name=&quot;ExampleDS&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot;&gt;
</span><span class='line'><span class="gd">-                    &lt;connection-url&gt;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&lt;/connection-url&gt;</span>
</span><span class='line'><span class="gd">-                    &lt;driver&gt;h2&lt;/driver&gt;</span>
</span><span class='line'><span class="gi">+                    &lt;connection-url&gt;jdbc:log4jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&lt;/connection-url&gt;</span>
</span><span class='line'><span class="gi">+                    &lt;driver&gt;log4jdbc&lt;/driver&gt;</span>
</span><span class='line'>                     &lt;security&gt;
</span><span class='line'>                         &lt;user-name&gt;sa&lt;/user-name&gt;
</span><span class='line'>                         &lt;password&gt;sa&lt;/password&gt;
</span><span class='line'><span class="gu">@@ -112,6 +112,9 @@</span>
</span><span class='line'>                     &lt;driver name=&quot;h2&quot; module=&quot;com.h2database.h2&quot;&gt;
</span><span class='line'>                         &lt;xa-datasource-class&gt;org.h2.jdbcx.JdbcDataSource&lt;/xa-datasource-class&gt;
</span><span class='line'>                     &lt;/driver&gt;
</span><span class='line'><span class="gi">+                    &lt;driver name=&quot;log4jdbc&quot; module=&quot;net.sf.log4jdbc&quot;&gt;</span>
</span><span class='line'><span class="gi">+                        &lt;datasource-class&gt;net.sf.log4jdbc.sql.jdbcapi.DataSource&lt;/datasource-class&gt;</span>
</span><span class='line'><span class="gi">+                    &lt;/driver&gt;</span>
</span><span class='line'>                 &lt;/drivers&gt;
</span><span class='line'>             &lt;/datasources&gt;
</span><span class='line'>         &lt;/subsystem&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Replace <code>jdbc:h2</code> with <code>jdbc:log4jdbc:h2</code> in the datasource connection url. This should work with every other JDBC URL, of course. An <code>h2</code> datasource is part of the JBoss standard configuration which is the reason this is used here.</li>
<li>The datasource driver needs to be replaced with <code>log4jdbc</code> which is the name the new datasource driver will be given in the next change.

<ul>
<li>Normale log4jdbc-log4j2 detects the real driver by the jdbc URL and delegates to it automatically. If that does not work this can be configured in the log4jdbc-log4j2 configuration manually.</li>
</ul>
</li>
<li>Add a datasource driver named <code>log4jdbc</code>. This driver is not more than a registration of the datasoure class <code>net.sf.log4jdbc.sql.jdbcapi.DataSource</code> of the <code>net.sf.log4jdbc</code> module that was created before.</li>
</ul>


<h2>Example Log Output</h2>

<p>The following shows the log output of a JPA2 Hibernate application doing an INSERT and a SELECT having all of the <code>jdbc</code> loggers activated. Log lines from <code>[stdout]</code> are the hibernate log lines enabled by the hibernate properties <code>hibernate.show_sql</code> and <code>hibernate.format_sql</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>14:20:11,261 INFO  [jdbc.connection] (ServerService Thread Pool -- 48) 1. Connection opened
</span><span class='line'>14:20:11,261 INFO  [jdbc.audit] (ServerService Thread Pool -- 48) 1. Connection.new Connection returned·
</span><span class='line'>
</span><span class='line'>[..]
</span><span class='line'>
</span><span class='line'>14:22:55,621 INFO  [stdout] (http-/127.0.0.1:8080-1) Hibernate:
</span><span class='line'>14:22:55,621 INFO  [stdout] (http-/127.0.0.1:8080-1)     select
</span><span class='line'>14:22:55,621 INFO  [stdout] (http-/127.0.0.1:8080-1)         nextval (&#39;hibernate_sequence&#39;)
</span><span class='line'>14:22:55,622 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.new PreparedStatement returned
</span><span class='line'>14:22:55,622 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.prepareStatement(select nextval (&#39;hibernate_sequence&#39;), 1003, 1007) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@4c0a9658
</span><span class='line'>14:22:55,623 INFO  [jdbc.sqlonly] (http-/127.0.0.1:8080-1) select nextval (&#39;hibernate_sequence&#39;)
</span><span class='line'>
</span><span class='line'>14:22:55,658 INFO  [jdbc.sqltiming] (http-/127.0.0.1:8080-1) select nextval (&#39;hibernate_sequence&#39;)
</span><span class='line'> {executed in 35 msec}
</span><span class='line'>14:22:55,658 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.new ResultSet returned
</span><span class='line'>14:22:55,658 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.executeQuery() returned net.sf.log4jdbc.sql.jdbcapi.ResultSetSpy@3398105a
</span><span class='line'>14:22:55,659 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.next() returned true
</span><span class='line'>14:22:55,662 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.getLong(1) returned 1
</span><span class='line'>14:22:55,663 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.wasNull() returned false
</span><span class='line'>14:22:55,663 INFO  [jdbc.resultsettable] (http-/127.0.0.1:8080-1)
</span><span class='line'>|--------|
</span><span class='line'>|nextval |
</span><span class='line'>|--------|
</span><span class='line'>|1       |
</span><span class='line'>|--------|
</span><span class='line'>
</span><span class='line'>14:22:55,664 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.close() returned void
</span><span class='line'>14:22:55,664 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getMaxRows() returned 0
</span><span class='line'>14:22:55,664 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getQueryTimeout() returned 0
</span><span class='line'>14:22:55,664 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.close() returned
</span><span class='line'>14:22:55,664 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.getWarnings() returned null
</span><span class='line'>14:22:55,665 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.clearWarnings() returned
</span><span class='line'>14:22:55,720 INFO  [stdout] (http-/127.0.0.1:8080-1) Hibernate:
</span><span class='line'>14:22:55,721 INFO  [stdout] (http-/127.0.0.1:8080-1)     insert
</span><span class='line'>14:22:55,721 INFO  [stdout] (http-/127.0.0.1:8080-1)     into
</span><span class='line'>14:22:55,721 INFO  [stdout] (http-/127.0.0.1:8080-1)         Foo
</span><span class='line'>14:22:55,721 INFO  [stdout] (http-/127.0.0.1:8080-1)         (a, b, version, id)
</span><span class='line'>14:22:55,722 INFO  [stdout] (http-/127.0.0.1:8080-1)     values
</span><span class='line'>14:22:55,722 INFO  [stdout] (http-/127.0.0.1:8080-1)         (?, ?, ?, ?)
</span><span class='line'>14:22:55,722 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.new PreparedStatement returned
</span><span class='line'>14:22:55,722 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.prepareStatement(insert into Foo (a, b, version, id) values (?, ?, ?, ?), 1003, 1007) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@46443961
</span><span class='line'>14:22:55,724 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.setString(1, &quot;aValue&quot;) returned
</span><span class='line'>14:22:55,725 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.setString(2, &quot;bValue&quot;) returned
</span><span class='line'>14:22:55,725 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.setInt(3, 0) returned
</span><span class='line'>14:22:55,726 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.setLong(4, 1) returned
</span><span class='line'>14:22:55,726 INFO  [jdbc.sqlonly] (http-/127.0.0.1:8080-1) insert into Foo (a, b, version, id) values (&#39;aValue&#39;, &#39;bValue&#39;, 0, 1)
</span><span class='line'>
</span><span class='line'>14:22:55,727 INFO  [jdbc.sqltiming] (http-/127.0.0.1:8080-1) insert into Foo (a, b, version, id) values (&#39;aValue&#39;, &#39;bValue&#39;, 0, 1)
</span><span class='line'> {executed in 1 msec}
</span><span class='line'>14:22:55,728 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.executeUpdate() returned 1
</span><span class='line'>14:22:55,728 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getMaxRows() returned 0
</span><span class='line'>14:22:55,728 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getQueryTimeout() returned 0
</span><span class='line'>14:22:55,728 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.close() returned
</span><span class='line'>14:22:55,729 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.getWarnings() returned null
</span><span class='line'>14:22:55,730 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.clearWarnings() returned
</span><span class='line'>14:22:55,761 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.commit() returned
</span><span class='line'>14:23:05,089 INFO  [stdout] (http-/127.0.0.1:8080-1) Hibernate:
</span><span class='line'>14:23:05,089 INFO  [stdout] (http-/127.0.0.1:8080-1)     select
</span><span class='line'>14:23:05,090 INFO  [stdout] (http-/127.0.0.1:8080-1)         distinct foo0_.id as id0_,
</span><span class='line'>14:23:05,090 INFO  [stdout] (http-/127.0.0.1:8080-1)         foo0_.a as a0_,
</span><span class='line'>14:23:05,090 INFO  [stdout] (http-/127.0.0.1:8080-1)         foo0_.b as b0_,
</span><span class='line'>14:23:05,090 INFO  [stdout] (http-/127.0.0.1:8080-1)         foo0_.version as version0_
</span><span class='line'>14:23:05,090 INFO  [stdout] (http-/127.0.0.1:8080-1)     from
</span><span class='line'>14:23:05,091 INFO  [stdout] (http-/127.0.0.1:8080-1)         Foo foo0_
</span><span class='line'>14:23:05,091 INFO  [stdout] (http-/127.0.0.1:8080-1)     order by
</span><span class='line'>14:23:05,091 INFO  [stdout] (http-/127.0.0.1:8080-1)         foo0_.id
</span><span class='line'>14:23:05,092 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.new PreparedStatement returned
</span><span class='line'>14:23:05,092 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.prepareStatement(select distinct foo0_.id as id0_, foo0_.a as a0_, foo0_.b as b0_, foo0_.version as version0_ from Foo foo0_ order by foo0_.id, 1003, 1007) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@1735e74d
</span><span class='line'>14:23:05,093 INFO  [jdbc.sqlonly] (http-/127.0.0.1:8080-1) select distinct foo0_.id as id0_, foo0_.a as a0_, foo0_.b as b0_, foo0_.version as version0_
</span><span class='line'>from Foo foo0_ order by foo0_.id
</span><span class='line'>
</span><span class='line'>14:23:05,094 INFO  [jdbc.sqltiming] (http-/127.0.0.1:8080-1) select distinct foo0_.id as id0_, foo0_.a as a0_, foo0_.b as b0_, foo0_.version as version0_
</span><span class='line'>from Foo foo0_ order by foo0_.id
</span><span class='line'> {executed in 1 msec}
</span><span class='line'>14:23:05,094 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.new ResultSet returned
</span><span class='line'>14:23:05,094 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.executeQuery() returned net.sf.log4jdbc.sql.jdbcapi.ResultSetSpy@3d91c735
</span><span class='line'>14:23:05,095 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.next() returned true
</span><span class='line'>14:23:05,096 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.getLong(id0_) returned 1
</span><span class='line'>14:23:05,096 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.wasNull() returned false
</span><span class='line'>14:23:05,099 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.getString(a0_) returned aValue
</span><span class='line'>14:23:05,099 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.wasNull() returned false
</span><span class='line'>14:23:05,099 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.getString(b0_) returned bValue
</span><span class='line'>14:23:05,100 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.wasNull() returned false
</span><span class='line'>14:23:05,100 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.getInt(version0_) returned 0
</span><span class='line'>14:23:05,100 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.wasNull() returned false
</span><span class='line'>14:23:05,102 INFO  [jdbc.resultsettable] (http-/127.0.0.1:8080-1)
</span><span class='line'>|-----|-------|-------|----------|
</span><span class='line'>|id0_ |a0_    |b0_    |version0_ |
</span><span class='line'>|-----|-------|-------|----------|
</span><span class='line'>|1    |aValue |bValue |0         |
</span><span class='line'>|-----|-------|-------|----------|
</span><span class='line'>
</span><span class='line'>14:23:05,103 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.next() returned false
</span><span class='line'>14:23:05,103 INFO  [jdbc.resultset] (http-/127.0.0.1:8080-1) 1. ResultSet.close() returned void
</span><span class='line'>14:23:05,104 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getMaxRows() returned 0
</span><span class='line'>14:23:05,104 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.getQueryTimeout() returned 0
</span><span class='line'>14:23:05,104 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. PreparedStatement.close() returned
</span><span class='line'>14:23:05,105 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.getWarnings() returned null
</span><span class='line'>14:23:05,105 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.clearWarnings() returned
</span><span class='line'>14:23:05,106 INFO  [jdbc.audit] (http-/127.0.0.1:8080-1) 1. Connection.commit() returned
</span><span class='line'>
</span><span class='line'>[..]
</span><span class='line'>
</span><span class='line'>15:04:19,298 INFO  [jdbc.audit] (IdleRemover) 1. Connection.rollback() returned
</span><span class='line'>15:04:19,301 INFO  [jdbc.connection] (IdleRemover) 1. Connection closed
</span><span class='line'>15:04:19,302 INFO  [jdbc.audit] (IdleRemover) 1. Connection.close() returned
</span></code></pre></td></tr></table></div></figure>


<h2>Adjust the logging configuration</h2>

<p>Since the <code>jdbc</code> loggers provide overlapping information the logging should be configured to match ones needs.
In the following log4jdbc-log4j2 logging is restricted to <code>jdbc.timing</code> output. For details of the logging configuration see the log4jdbc-log4j2 <a href="https://code.google.com/p/log4jdbc-log4j2/">documentation</a> and especially the section for the slf4j loggers like <code>jdbc.sqlonly</code>, <code>jdbc.sqltiming</code> and so forth.</p>

<p>Add the following lines next to the other logger elements in the JBoss configuration:</p>

<figure class='code'><figcaption><span>standalone/configuration/standalone.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;logger</span> <span class="na">category=</span><span class="s">&quot;jdbc&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;level</span> <span class="na">name=</span><span class="s">&quot;FATAL&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/logger&gt;</span>
</span><span class='line'>        <span class="nt">&lt;logger</span> <span class="na">category=</span><span class="s">&quot;jdbc.sqltiming&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;level</span> <span class="na">name=</span><span class="s">&quot;INFO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/logger&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you can use the <a href="https://docs.jboss.org/author/display/AS72/Admin+Guide#AdminGuide-CommandLineInterface">JBoss CLI</a> if you like.</p>

<p>To turn of the JDBC tracing completely and remove the overhead it is enough to set jdbc logging completely to <code>FATAL</code> by removing the second logger element added before, no need to undo all the rest of the configuration made above.</p>
]]></content>
  </entry>
  
</feed>
